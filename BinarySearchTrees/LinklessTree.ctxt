#BlueJ class context
comment0.target=LinklessTree
comment0.text=\r\n\ Trees\ without\ explicit\ links.\r\n\ Notice\ that\ various\ fields/methods\ have\ the\ protected\ modifier\r\n\ when\ normally\ they\ would/should\ be\ private.\r\n\ The\ reason\ is\ that\ this\ supports\ whitebox\ testing.\r\n\r\n\ @author\ Stefan\ Kahrs\r\n\ @version\ 1\r\n
comment1.params=
comment1.target=LinklessTree()
comment10.params=index
comment10.target=java.util.ArrayList\ getArrayWithNoNulls(int)
comment10.text=\ \ \r\n\ Returns\ all\ the\ non-null\ things\ from\ elems\ as\ an\ arraylist\r\n\ @param\ index\ The\ index\ of\ the\ node\r\n\ @return\ The\ ArrayList\ containing\ all\ the\ values\ that\ are\ in\ the\ node\ \r\n
comment11.params=i
comment11.target=java.lang.Comparable\ get(int)
comment11.text=\ \ \r\n\ Fetches\ the\ i-th\ element,\ in\ comparsion\ order\r\n\ @param\ i\ The\ index\ of\ the\ element\ that\ we\ want\r\n\ @return\ The\ i-th\ elemnt\ of\ the\ sorted\ ArrayList\r\n
comment12.params=x
comment12.target=boolean\ insert(java.lang.Comparable)
comment12.text=\ \ \r\n\ adds\ x\ to\ tree,\ return\ true\ if\ tree\ was\ modified\r\n\ multiple\ copies\ of\ the\ equal\ objects\ in\ tree\ are\ not\ allowed\r\n\ equality\ is\ decided\ by\ using\ compareTo\r\n\ @param\ x\ The\ node\ that\ we\ want\ to\ add\r\n\ @return\ Whether\ the\ tree\ was\ modified\r\n
comment13.params=index
comment13.target=void\ IncrementSizes(int)
comment13.text=\ \ \r\n\ Fixes\ the\ sizes\ array\ after\ an\ insert\ of\ a\ node\r\n\ @param\ index\ The\ index\ of\ the\ node\ that\ was\ added\r\n
comment14.params=index
comment14.target=void\ DecrementSizes(int)
comment14.text=\ \ \r\n\ Fixes\ the\ sizes\ array\ after\ deletion\ of\ a\ node\r\n\ @param\ index\ The\ index\ of\ the\ node\ that\ was\ added\r\n
comment15.params=x
comment15.target=boolean\ delete(java.lang.Comparable)
comment15.text=\ \ \r\n\ remove\ x\ from\ tree,\ return\ true\ if\ tree\ was\ modified\r\n\ @param\ x\ The\ node\ that\ we\ want\ to\ delete\r\n\ @return\ Whether\ the\ tree\ was\ modified\r\n
comment16.params=subtree
comment16.target=void\ deleteLargest(int)
comment16.text=\ \ \r\n\ find\ the\ largest\ in\ the\ branch\ and\ replaces\ it\ with\ the\ deleted\ node\r\n\ @param\ subtree\ The\ node\ that\ we\ want\ to\ delete\r\n
comment17.params=subtree
comment17.target=void\ deleteSmallest(int)
comment17.text=\ \ \r\n\ find\ the\ smallest\ in\ the\ branch\ and\ replaces\ it\ with\ the\ deleted\ node\r\n\ @param\ subtree\ The\ node\ that\ we\ want\ to\ delete\r\n
comment2.params=
comment2.target=int\ size()
comment3.params=index
comment3.target=java.lang.Comparable\ getValue(int)
comment4.params=subtree
comment4.target=java.lang.Comparable\ getKey(int)
comment5.params=subtree
comment5.target=int\ getSize(int)
comment6.params=capacity
comment6.target=java.lang.Object[]\ freshElemArray(int)
comment7.params=val
comment7.target=int\ findIndex(java.lang.Comparable)
comment7.text=\r\n\ find\ index\ position\ of\ val\ in\ tree,\ if\ there,\ or\ where\ it\ goes,\ if\ not\ there\ \ \ \r\n
comment8.params=value
comment8.target=boolean\ contains(java.lang.Comparable)
comment8.text=\r\n\ Checks\ if\ the\ value\ is\ in\ the\ tree\ \ \r\n\ @param\ value\ The\ value\ to\ be\ searched\r\n\ @return\ Whether\ the\ value\ was\ foud\ or\ not\ \r\n
comment9.params=
comment9.target=void\ grow()
comment9.text=\ \ \r\n\ Grows\ the\ space\ in\ which\ we\ can\ place\ the\ tree\r\n
numComments=18
